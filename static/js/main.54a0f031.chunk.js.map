{"version":3,"sources":["images/dark_continent.jpg","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","API.ts","utils.ts","App.tsx","index.tsx"],"names":["module","exports","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","userAnswer","callback","questionNr","totalQuestion","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","Difficulty","GlobalStyle","createGlobalStyle","BGImage","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","Fragment","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54a0f031.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dark_continent.e06288c3.jpg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 1rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) => \n            correct\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)' \n                : !correct && userClicked \n                ? 'linear-gradient(90deg, #ff5656, #c16868)' \n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0 rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);\n    }\n\n`","import React from 'react'\nimport { AnswerObject } from '../App'\n\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestion: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({ \n    question, \n    answers,\n    userAnswer, \n    callback, \n    questionNr, \n    totalQuestion\n}) => {\n    return(\n        <Wrapper>\n           <p className=\"number\">\n               Question: {questionNr} / {totalQuestion} \n           </p>\n\n           <p dangerouslySetInnerHTML={{ __html: question }}></p>\n           <div>\n            {answers.map(answer => (\n                <ButtonWrapper \n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}\n                >\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer}} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n           </div>\n        </Wrapper>\n    )\n}\n\nexport default QuestionCard","import styled, { createGlobalStyle } from 'styled-components'\n// @ts-ignore\nimport BGImage from './images/dark_continent.jpg'\n\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: 'Fascinate Inline', sans-serif;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px black);\n        font-size: 70px;\n        font-weight: 700;\n        text-align: center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #438558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n`","import { shuffleArray } from './utils'\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[]};\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=31&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n\n    return data.results.map((question: Question) => (\n        {\n            ...question, \n            answers: shuffleArray([\n                ...question.incorrect_answers, \n                question.correct_answer])\n        }\n    ))\n}","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5)\n\n\n","import React, { useState }from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport {GlobalStyle, Wrapper} from './App.styles'\n\nimport { fetchQuizQuestions } from './API';\nimport { QuestionState, Difficulty } from './API';\n\nexport type AnswerObject = {\n  questions: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value\n      const correct =  questions[number].correct_answer === answer\n\n      if(correct) {\n        setScore(prev => prev + 1)\n      }\n\n      const answerObject = {\n        questions: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n\n      setUserAnswers((prev) => [...prev, answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1\n    if(nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true)\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>React Anime Quiz</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null }\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions...</p> }\n        \n        {!loading && !gameOver && (\n        <QuestionCard \n          questionNr={number + 1}\n          totalQuestion={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n\n        />\n        )}\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS -1 ? (\n              <button className=\"next\" onClick={nextQuestion}>\n                Next Question\n              </button>\n        ) : null }\n    \n      </Wrapper>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}